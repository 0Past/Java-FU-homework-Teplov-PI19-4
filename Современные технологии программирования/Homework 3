import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static String recursion(int n) {
        // Базовый случай
        if (n == 1) {
            return "1";
        }
        // Шаг рекурсии / рекурсивное условие
        return recursion(n - 1) + " " + n;
    }

    public static int bruteForce(double[] array, double key) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == key)
                return i;
        }
        return -1;
    }
    public static int binarySearchRecursively(double[] sortedArray, double key) {
        return binarySearchRecursively(sortedArray, key, 0, sortedArray.length);
    }
    private static int binarySearchRecursively
            (double[] sortedArray, double key, int low, int high) {
        int middle = (low + high) / 2; // середина

        if (high < low) { // больше делить нечего
            return -1;
        }

        if (key == sortedArray[middle]) { // если нашёлся
            return middle;
        } else if (key < sortedArray[middle]) { // ищем в левой половине
            return binarySearchRecursively(
                    sortedArray, key, low, middle - 1);
        } else {
            return binarySearchRecursively( // ищем в правой половине
                    sortedArray, key, middle + 1, high);
        }
    }
    private static double[] generateRandomArray(int length) {
        double[] array = new double[length];
        for (int i = 0; i < array.length; i++) {
            array[i] = Math.random();
        }
        return array;
    }
    // вспомогательный метод
    public static double func(double x){
        return Math.cos(Math.pow(x, 5)) + Math.pow(x, 4) - 345.3 * x - 23;
    }

    // решить уравнение
    public static double  solve(double start, double end){
        if(end - start <= 0.001){
            return start;
        }

        double x = start + (end - start) / 2;

        if(func(start) * func(x) > 0){
            return solve(x, end);
        } else {
            return solve(start, x);
        }
    }
    public static void main(String[] args) {
        int inp;
        int choice;
        double[] array = generateRandomArray(100000000);
        Scanner input = new Scanner(System.in);
        System.out.println("Введите номер задания");
        choice = input.nextInt();
        if (choice == 1) {
            inp = input.nextInt();
            System.out.println("Task1 \n" + recursion(inp)); // Task 1
        }
        else if (choice == 2) {
            Arrays.sort(array);
            long time = System.currentTimeMillis(); // текущее время, unix-time
            bruteForce(array, 0.5);
            System.out.println("Task2  " + (System.currentTimeMillis() - time));// Task 2

            time = System.currentTimeMillis();
            binarySearchRecursively(array, 0.5);
            System.out.println("Task2  " + (System.currentTimeMillis() - time));// Task 2
        }
        else if (choice == 3) {
            System.out.println("Task3  " + solve(0, 10)); //Task 3
        }
        else {
            System.out.println("NONONONONONONO");
        }

    }
}
